//-------------------------------------------------------------------------
// GEMMComb.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL Component GEMMUnit Definition
// Full name: GEMMUnit__M_3__K_3__N_3
// At c:\Users\Raul\Desktop\TFG\GEMM\gemm.py

module GEMMComb
(
  input  logic [7:0] A [0:2][0:2],
  input  logic [7:0] B [0:2][0:2],
  input  logic [7:0] C [0:2][0:2],
  output logic [7:0] D [0:2][0:2],
  input  logic [7:0] alpha ,
  input  logic [7:0] beta ,
  input  logic [0:0] clk ,
  input  logic [0:0] reset 
);
  localparam logic [1:0] __const__M_at_compute_gemm  = 2'd3;
  localparam logic [1:0] __const__N_at_compute_gemm  = 2'd3;
  localparam logic [1:0] __const__K_at_compute_gemm  = 2'd3;
  logic [7:0] __tmpvar__compute_gemm_acc;

  // PyMTL Update Block Source
  // At c:\Users\Raul\Desktop\TFG\GEMM\gemm.py:15
  // @update
  // def compute_gemm():
  //     for i in range(M):
  //         for j in range(N):
  //             acc = s.beta * s.C[i][j]  # Escalar C
  //             for k in range(K):
  //                 acc = acc + s.alpha * s.A[i][k] * s.B[k][j]  # Producto de matrices
  //             s.D[i][j] @= acc
  
  always_comb begin : compute_gemm
    for ( int unsigned i = 1'd0; i < 2'( __const__M_at_compute_gemm ); i += 1'd1 )
      for ( int unsigned j = 1'd0; j < 2'( __const__N_at_compute_gemm ); j += 1'd1 ) begin
        __tmpvar__compute_gemm_acc = beta * C[2'(i)][2'(j)];
        for ( int unsigned k = 1'd0; k < 2'( __const__K_at_compute_gemm ); k += 1'd1 )
          __tmpvar__compute_gemm_acc = __tmpvar__compute_gemm_acc + ( ( alpha * A[2'(i)][2'(k)] ) * B[2'(k)][2'(j)] );
        D[2'(i)][2'(j)] = __tmpvar__compute_gemm_acc;
      end
  end

endmodule
